{"version":3,"file":"static/js/256.e2f2b9d4.chunk.js","mappings":"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","sources":["components/Alert/Alert.jsx","components/ContactForm/ContactForm.jsx","components/ContactForm/ContactEditForm.jsx","components/FormButton/FormButton.jsx","components/FormInput/FormInput.jsx","components/ContactsList/ContactsList.jsx","components/ContactsListFilter/ContactsListFilter.jsx","components/LoginForm/LoginForm.jsx","components/Modal/Modal.jsx","components/RegisterForm/RegisterForm.jsx","pages/Home/Home.jsx","utils/constants.js"],"sourcesContent":["export const Alert = ({ type, children }) => {\n  let icon = '';\n  let className = '';\n\n  switch (type) {\n    case 'info':\n      icon = 'M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z';\n      className = 'alert-info';\n      break;\n    case 'success':\n      icon = 'M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z';\n      className = 'alert-success';\n      break;\n    case 'warning':\n      icon =\n        'M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z';\n      className = 'alert-warning';\n      break;\n    case 'error':\n      icon =\n        'M10 14l2-2m0 0l2-2m-2 2l-2-2m2 2l2 2m7-2a9 9 0 11-18 0 9 9 0 0118 0z';\n      className = 'alert-error';\n      break;\n    default:\n      icon = 'M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z';\n      className = '';\n  }\n  return (\n    <div role=\"alert\" className={`alert ${className}`}>\n      <svg\n        xmlns=\"http://www.w3.org/2000/svg\"\n        className=\"stroke-current shrink-0 h-6 w-6\"\n        fill=\"none\"\n        viewBox=\"0 0 24 24\"\n      >\n        <path\n          strokeLinecap=\"round\"\n          strokeLinejoin=\"round\"\n          strokeWidth=\"2\"\n          d={icon}\n        />\n      </svg>\n      <span>{children}</span>\n    </div>\n  );\n};\n","import { useEffect, useRef } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { FormProvider, useForm } from 'react-hook-form';\n\nimport { createContact } from './../../redux/contacts/operations';\nimport { selectContactsAll } from './../../redux/selectors';\nimport { setError } from './../../redux/contacts/contactsSlice';\nimport { selectContactsError } from './../../redux/selectors';\nimport { selectDrawerId } from './../../redux/selectors';\nimport { closeDrawer } from './../../redux/app/appSlice';\nimport { Alert } from 'components/Alert/Alert';\nimport { FormInput, FormButton } from 'components';\n\nexport const ContactForm = ({ formDrawerId, isDrawerOpen }) => {\n  const nameInput = useRef(null);\n  const dispatch = useDispatch();\n\n  const contacts = useSelector(selectContactsAll);\n  const error = useSelector(selectContactsError);\n  const drawerId = useSelector(selectDrawerId);\n\n  const methods = useForm();\n  const { handleSubmit, reset } = methods;\n\n  useEffect(() => {\n    isDrawerOpen && formDrawerId === drawerId && nameInput.current.focus();\n  }, [isDrawerOpen, formDrawerId, drawerId]);\n\n  const contactsExist = ({ name }) => {\n    return contacts.find(item =>\n      item.name.toLowerCase().includes(name.toLowerCase())\n    );\n  };\n\n  const onFormSubmit = data => {\n    if (contactsExist(data)) {\n      dispatch(setError('Contact already added to your Phonebook'));\n      nameInput.current.focus();\n      return;\n    }\n\n    dispatch(createContact(data))\n      .unwrap()\n      .then(resp => {\n        reset();\n        dispatch(closeDrawer('add-contact-drawer'));\n      })\n      .catch(error => {});\n  };\n\n  return (\n    <FormProvider {...methods}>\n      {error && <Alert type=\"error\">{error}</Alert>}\n\n      <form\n        className=\"flex flex-col gap-5\"\n        name=\"contactForm\"\n        autoComplete=\"off\"\n        onSubmit={handleSubmit(onFormSubmit)}\n      >\n        <FormInput\n          label=\"Name\"\n          name=\"name\"\n          type=\"text\"\n          placeholder=\"Enter your Contact Full Name\"\n          required={true}\n          ref={nameInput}\n        />\n        <FormInput\n          label=\"Number\"\n          name=\"number\"\n          type=\"tel\"\n          placeholder=\"Enter your Contact Phone Number\"\n          required={true}\n        />\n\n        <FormButton type=\"submit\" btnType=\"btn-info\">\n          Add contact\n        </FormButton>\n      </form>\n    </FormProvider>\n  );\n};\n","import { useEffect, useRef } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { FormProvider, useForm } from 'react-hook-form';\n\nimport { updateContact } from './../../redux/contacts/operations';\nimport { selectContactsError } from '../../redux/selectors';\nimport { selectSelectedContact } from '../../redux/selectors';\nimport { selectDrawerId } from '../../redux/selectors';\nimport { closeDrawer } from '../../redux/app/appSlice';\nimport { Alert } from 'components/Alert/Alert';\nimport { FormInput, FormButton } from 'components';\n\nexport const ContactEditForm = ({ formDrawerId, isDrawerOpen }) => {\n  const nameInput = useRef(null);\n  const dispatch = useDispatch();\n\n  const error = useSelector(selectContactsError);\n  const selectedContact = useSelector(selectSelectedContact);\n  const drawerId = useSelector(selectDrawerId);\n\n  const methods = useForm();\n  const { handleSubmit, reset } = methods;\n\n  useEffect(() => {\n    isDrawerOpen && formDrawerId === drawerId && nameInput.current.focus();\n  }, [isDrawerOpen, formDrawerId, drawerId]);\n\n  const onFormSubmit = data => {\n    dispatch(updateContact({ id: selectedContact.id, constact: data }))\n      .unwrap()\n      .then(resp => {\n        reset();\n        dispatch(closeDrawer('add-contact-drawer'));\n      })\n      .catch(error => {});\n  };\n\n  return (\n    <FormProvider {...methods}>\n      {error && <Alert type=\"error\">{error}</Alert>}\n\n      <form\n        className=\"flex flex-col gap-5\"\n        name=\"contactForm\"\n        autoComplete=\"off\"\n        onSubmit={handleSubmit(onFormSubmit)}\n      >\n        <FormInput\n          label=\"Name\"\n          name=\"name\"\n          value={selectedContact?.name}\n          type=\"text\"\n          placeholder=\"Enter your Contact Full Name\"\n          required={true}\n          ref={nameInput}\n        />\n        <FormInput\n          label=\"Number\"\n          name=\"number\"\n          value={selectedContact?.number}\n          type=\"tel\"\n          placeholder=\"Enter your Contact Phone Number\"\n          required={true}\n        />\n\n        <FormButton type=\"submit\" btnType=\"btn-warning\">\n          Update contact\n        </FormButton>\n      </form>\n    </FormProvider>\n  );\n};\n","export const FormButton = ({\n  type = 'button',\n  btnType = '',\n  onClick,\n  children,\n}) => {\n  return (\n    <button className={`btn ${btnType}`} type={type} onClick={onClick}>\n      {children}\n    </button>\n  );\n};\n","import { useFormContext } from 'react-hook-form';\nimport { forwardRef, useEffect } from 'react';\n\nexport const FormInput = forwardRef(function FormInput(\n  {\n    label,\n    type,\n    name,\n    value,\n    placeholder = '',\n    required = false,\n    focus = false,\n  },\n  fieldRef\n) {\n  const { register, setValue } = useFormContext();\n  const { ref, ...restRegister } = register(name);\n\n  useEffect(() => {\n    setValue(name, value);\n  }, [name, value, setValue]);\n\n  return (\n    <label className=\"form-control w-full\">\n      <div className=\"label\">\n        <span className=\"label-text\">{label}</span>\n      </div>\n      <input\n        type={type}\n        name={name}\n        autoFocus={focus}\n        required={required}\n        placeholder={placeholder}\n        {...restRegister}\n        ref={e => {\n          ref(e);\n          if (fieldRef) {\n            fieldRef.current = e;\n          }\n        }}\n        className=\"input input-bordered w-full \"\n      />\n    </label>\n  );\n});\n","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport {\n  selectContactsIsLoading,\n  selectFilteredContacts,\n} from './../../redux/selectors';\nimport {\n  deleteContact,\n  getAllContacts,\n} from './../../redux/contacts/operations';\nimport { setSelectedContact } from './../../redux/contacts/contactsSlice';\nimport { openDrawer } from './../../redux/app/appSlice';\nimport { FormButton } from 'components';\nimport { Loader } from 'components/Loader/Loader';\n\nexport const ContactsList = () => {\n  const isLoading = useSelector(selectContactsIsLoading);\n  const contacts = useSelector(selectFilteredContacts);\n\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(getAllContacts());\n  }, [dispatch]);\n\n  const onUpdate = id => {\n    dispatch(setSelectedContact(id));\n    dispatch(openDrawer('edit-contact-drawer'));\n  };\n\n  const onDelete = id => {\n    dispatch(deleteContact(id));\n  };\n\n  return (\n    <>\n      {isLoading && <Loader />}\n\n      {contacts.length > 0 && (\n        <ul className=\"flex flex-col divide-y-2\">\n          {contacts.map(({ id, name, number }, index) => (\n            <li\n              key={id}\n              className=\"flex flex-row gap-5 justify-start justify-items-center py-3\"\n            >\n              <div className=\"flex-grow\">\n                <div className=\"text-xl font-bold capitalize\">{name}</div>\n                <div className=\"\">{number}</div>\n              </div>\n              <div className=\"flex gap-3\">\n                <FormButton btnType=\"btn-warning\" onClick={() => onUpdate(id)}>\n                  Update\n                </FormButton>\n                <FormButton btnType=\"btn-error\" onClick={() => onDelete(id)}>\n                  Delete\n                </FormButton>\n              </div>\n            </li>\n          ))}\n        </ul>\n      )}\n    </>\n  );\n};\n","import { useDispatch } from 'react-redux';\nimport { changeFilter } from './../../redux/contacts/filterSlice';\nimport { FiSearch } from 'react-icons/fi';\n\nexport const ContactsListFilter = () => {\n  const dispatch = useDispatch();\n\n  return (\n    <div className=\"relative mt-2 rounded-md shadow-sm\">\n      <div className=\"pointer-events-none absolute inset-y-0 left-0 flex items-center pl-3\">\n        <span className=\"text-gray-500 sm:text-sm\">\n          <FiSearch size={20} />\n        </span>\n      </div>\n      <input\n        type=\"text\"\n        name=\"filter\"\n        placeholder=\"Search\"\n        className=\"input input-bordered w-full px-10\"\n        onChange={event => dispatch(changeFilter(event.target.value.trim()))}\n      />\n    </div>\n  );\n};\n","import { FormProvider, useForm } from 'react-hook-form';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport {\n  selectAuthError,\n  selectFormId,\n  selectModalId,\n} from './../../redux/selectors';\nimport { userLogin } from './../../redux/auth/operations';\nimport { Alert } from 'components/Alert/Alert';\nimport { useEffect, useRef } from 'react';\nimport { FormButton, FormInput } from 'components';\nimport { setFormId, toggleModal } from './../../redux/app/appSlice';\n\nexport const LoginForm = ({ id, isModalOpen }) => {\n  const dispatch = useDispatch();\n  const error = useSelector(selectAuthError);\n  const formId = useSelector(selectFormId);\n  const modalId = useSelector(selectModalId);\n\n  const emailInput = useRef(null);\n  const methods = useForm();\n  const { handleSubmit, reset } = methods;\n\n  useEffect(() => {\n    if (isModalOpen && modalId === id) {\n      emailInput.current.focus();\n    }\n  }, [isModalOpen, modalId, id]);\n\n  const onSubmit = credentials => {\n    dispatch(setFormId(id));\n    dispatch(userLogin(credentials))\n      .unwrap()\n      .then(() => {\n        reset();\n        dispatch(toggleModal());\n      })\n      .catch(error => {});\n  };\n  return (\n    <FormProvider {...methods}>\n      {id === formId && error && <Alert type=\"error\">{error}</Alert>}\n\n      <form\n        className=\"flex flex-col gap-5\"\n        onSubmit={handleSubmit(onSubmit)}\n        autoComplete=\"off\"\n      >\n        <FormInput\n          label=\"Email\"\n          name=\"email\"\n          type=\"email\"\n          focus={true}\n          required={true}\n          ref={emailInput}\n          placeholder=\"Enter your email\"\n        />\n\n        <FormInput\n          label=\"Password\"\n          name=\"password\"\n          type=\"password\"\n          required={true}\n          placeholder=\"Enter your password\"\n        />\n\n        <FormButton btnType=\"btn-success\" type=\"submit\">\n          Login\n        </FormButton>\n      </form>\n    </FormProvider>\n  );\n};\n","import { useSelector } from 'react-redux';\nimport { selectIsModalOpen, selectModalId } from './../../redux/selectors';\n\nexport const Modal = ({ id, close, children }) => {\n  const isModalOpen = useSelector(selectIsModalOpen);\n  const modalId = useSelector(selectModalId);\n\n  return (\n    <dialog\n      id={id}\n      className={`modal modal-bottom sm:modal-middle ${\n        isModalOpen && modalId === id && 'modal-open'\n      }`}\n    >\n      <div className=\"modal-box\">\n        <form method=\"dialog\">\n          <button\n            onClick={close}\n            className=\"btn btn-sm btn-circle btn-ghost absolute right-2 top-2\"\n          >\n            ✕\n          </button>\n        </form>\n        <div className=\"py-4\">{children}</div>\n      </div>\n    </dialog>\n  );\n};\n","import { FormProvider, useForm } from 'react-hook-form';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport {\n  selectAuthError,\n  selectFormId,\n  selectModalId,\n} from './../../redux/selectors';\nimport { userSignup } from './../../redux/auth/operations';\nimport { setFormId, toggleModal } from './../../redux/app/appSlice';\n\nimport { Alert } from 'components/Alert/Alert';\nimport { useEffect, useRef } from 'react';\nimport { FormButton, FormInput } from 'components';\n\nexport const RegisterForm = ({ id, isModalOpen }) => {\n  const dispatch = useDispatch();\n  const nameInput = useRef(null);\n  const error = useSelector(selectAuthError);\n  const formId = useSelector(selectFormId);\n  const modalId = useSelector(selectModalId);\n  const methods = useForm();\n  const { handleSubmit, reset } = methods;\n\n  useEffect(() => {\n    isModalOpen && modalId === id && nameInput.current.focus();\n  }, [isModalOpen, modalId, id]);\n\n  const onSubmit = data => {\n    dispatch(setFormId(id));\n    dispatch(userSignup(data))\n      .unwrap()\n      .then(() => {\n        reset();\n        dispatch(toggleModal());\n      })\n      .catch(error => {});\n  };\n\n  return (\n    <FormProvider {...methods}>\n      {formId && formId === id && error && <Alert type=\"error\">{error}</Alert>}\n      <form\n        className=\"flex flex-col gap-5\"\n        onSubmit={handleSubmit(onSubmit)}\n        autoComplete=\"off\"\n      >\n        <FormInput\n          label=\"Full Name\"\n          name=\"name\"\n          type=\"text\"\n          required={true}\n          ref={nameInput}\n          placeholder=\"Enter your Full Name\"\n        />\n\n        <FormInput\n          label=\"Email\"\n          name=\"email\"\n          type=\"email\"\n          required={true}\n          placeholder=\"Enter your email\"\n        />\n\n        <FormInput\n          label=\"Password\"\n          name=\"password\"\n          type=\"password\"\n          required={true}\n          placeholder=\"Enter your password\"\n        />\n\n        <FormButton btnType=\"btn-info\" type=\"submit\">\n          Register\n        </FormButton>\n      </form>\n    </FormProvider>\n  );\n};\n","import { LoginForm } from 'components/LoginForm/LoginForm';\nimport { Modal } from 'components/Modal/Modal';\nimport { RegisterForm } from 'components/RegisterForm/RegisterForm';\nimport React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectIsModalOpen } from './../../redux/selectors';\nimport { LOGIN_FORM_ID, REGISTER_FORM_ID } from 'utils/constants';\nimport { toggleModal } from './../../redux/app/appSlice';\n\nconst Home = () => {\n  const dispatch = useDispatch();\n  const isModalOpen = useSelector(selectIsModalOpen);\n\n  return (\n    <div className=\"hero min-h-screen bg-base-200\">\n      <div className=\"hero-content text-center\">\n        <div className=\"max-w-md\">\n          <h1 className=\"text-5xl font-bold\">Be organized</h1>\n          <p className=\"py-6\">\n            This app helps you to keep your contacts under your control. You can\n            easily add, update, and delete contacts from your list. The search\n            feature helps you to find the person you need in just a few clicks.\n          </p>\n          <div className=\"flex gap-5 justify-center\">\n            <button\n              className=\"btn btn-success\"\n              onClick={() => dispatch(toggleModal(LOGIN_FORM_ID))}\n            >\n              Login\n            </button>\n            <button\n              className=\"btn btn-info\"\n              onClick={() => dispatch(toggleModal(REGISTER_FORM_ID))}\n            >\n              Register\n            </button>\n          </div>\n        </div>\n        <Modal\n          close={() => dispatch(toggleModal(LOGIN_FORM_ID))}\n          id={LOGIN_FORM_ID}\n        >\n          <LoginForm isModalOpen={isModalOpen} id={LOGIN_FORM_ID} />\n        </Modal>\n        <Modal\n          close={() => dispatch(toggleModal(REGISTER_FORM_ID))}\n          id={REGISTER_FORM_ID}\n        >\n          <RegisterForm isModalOpen={isModalOpen} id={REGISTER_FORM_ID} />\n        </Modal>\n      </div>\n    </div>\n  );\n};\n\nexport default Home;\n","import { nanoid } from '@reduxjs/toolkit';\n\nexport const LOGIN_FORM_ID = nanoid();\nexport const REGISTER_FORM_ID = nanoid();\n"],"names":["Alert","_ref","type","children","icon","className","_jsxs","role","concat","_jsx","xmlns","fill","viewBox","strokeLinecap","strokeLinejoin","strokeWidth","d","ContactForm","formDrawerId","isDrawerOpen","nameInput","useRef","dispatch","useDispatch","contacts","useSelector","selectContactsAll","error","selectContactsError","drawerId","selectDrawerId","methods","useForm","handleSubmit","reset","useEffect","current","focus","FormProvider","_objectSpread","name","autoComplete","onSubmit","data","_ref2","find","item","toLowerCase","includes","contactsExist","setError","createContact","unwrap","then","resp","closeDrawer","catch","FormInput","label","placeholder","required","ref","FormButton","btnType","ContactEditForm","selectedContact","selectSelectedContact","updateContact","id","constact","value","number","_ref$type","_ref$btnType","onClick","forwardRef","fieldRef","_ref$placeholder","_ref$required","_ref$focus","_useFormContext","useFormContext","register","setValue","_register","restRegister","_objectWithoutProperties","_excluded","autoFocus","e","ContactsList","isLoading","selectContactsIsLoading","selectFilteredContacts","getAllContacts","_Fragment","Loader","length","map","index","setSelectedContact","openDrawer","onUpdate","deleteContact","onDelete","ContactsListFilter","FiSearch","size","onChange","event","changeFilter","target","trim","LoginForm","isModalOpen","selectAuthError","formId","selectFormId","modalId","selectModalId","emailInput","credentials","setFormId","userLogin","toggleModal","Modal","close","selectIsModalOpen","method","RegisterForm","userSignup","LOGIN_FORM_ID","REGISTER_FORM_ID","nanoid"],"sourceRoot":""}