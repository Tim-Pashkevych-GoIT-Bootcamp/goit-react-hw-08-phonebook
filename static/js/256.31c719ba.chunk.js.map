{"version":3,"file":"static/js/256.31c719ba.chunk.js","mappings":"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","sources":["components/Alert/Alert.jsx","components/ContactForm/ContactForm.jsx","components/FormButton/FormButton.jsx","components/FormInput/FormInput.jsx","components/ContactsList/ContactsList.jsx","components/ContactsListFilter/ContactsListFilter.jsx","components/LoginForm/LoginForm.jsx","components/Modal/Modal.jsx","components/RegisterForm/RegisterForm.jsx","pages/Home/Home.jsx"],"sourcesContent":["export const Alert = ({ type, children }) => {\n  let icon = '';\n  let className = '';\n\n  switch (type) {\n    case 'info':\n      icon = 'M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z';\n      className = 'alert-info';\n      break;\n    case 'success':\n      icon = 'M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z';\n      className = 'alert-success';\n      break;\n    case 'warning':\n      icon =\n        'M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z';\n      className = 'alert-warning';\n      break;\n    case 'error':\n      icon =\n        'M10 14l2-2m0 0l2-2m-2 2l-2-2m2 2l2 2m7-2a9 9 0 11-18 0 9 9 0 0118 0z';\n      className = 'alert-error';\n      break;\n    default:\n      icon = 'M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z';\n      className = '';\n  }\n  return (\n    <div role=\"alert\" className={`alert ${className}`}>\n      <svg\n        xmlns=\"http://www.w3.org/2000/svg\"\n        className=\"stroke-current shrink-0 h-6 w-6\"\n        fill=\"none\"\n        viewBox=\"0 0 24 24\"\n      >\n        <path\n          strokeLinecap=\"round\"\n          strokeLinejoin=\"round\"\n          strokeWidth=\"2\"\n          d={icon}\n        />\n      </svg>\n      <span>{children}</span>\n    </div>\n  );\n};\n","import { FormInput, FormButton } from 'components';\nimport { FormProvider, useForm } from 'react-hook-form';\nimport { useDispatch, useSelector } from 'react-redux';\nimport {\n  createContact,\n  updateContact,\n} from './../../redux/contacts/operations';\nimport { selectContactsAll } from './../../redux/selectors';\nimport { useEffect, useRef } from 'react';\nimport { setError } from './../../redux/contacts/contactsSlice';\nimport { selectContactsError } from './../../redux/selectors';\nimport { Alert } from 'components/Alert/Alert';\nimport { selectSelectedContact } from './../../redux/selectors';\n\nexport const ContactForm = ({ isDrawerOpen }) => {\n  const nameInput = useRef(null);\n  const dispatch = useDispatch();\n\n  const contacts = useSelector(selectContactsAll);\n  const error = useSelector(selectContactsError);\n  const selectedContact = useSelector(selectSelectedContact);\n\n  const methods = useForm();\n  const { handleSubmit, reset } = methods;\n\n  useEffect(() => {\n    isDrawerOpen && nameInput.current.focus();\n  }, [isDrawerOpen]);\n\n  const contactsExist = ({ name }) => {\n    return contacts.find(item =>\n      item.name.toLowerCase().includes(name.toLowerCase())\n    );\n  };\n\n  const onFormSubmit = data => {\n    if (!selectedContact && contactsExist(data)) {\n      dispatch(setError('Contact already added to your Phonebook'));\n      nameInput.current.focus();\n      return;\n    }\n\n    if (selectedContact) {\n      dispatch(updateContact({ id: selectedContact.id, constact: data }))\n        .unwrap()\n        .then(resp => {\n          reset();\n          document.getElementById('add-contact-drawer').click();\n        })\n        .catch(error => {});\n    } else {\n      dispatch(createContact(data))\n        .unwrap()\n        .then(resp => {\n          reset();\n          document.getElementById('add-contact-drawer').click();\n        })\n        .catch(error => {});\n    }\n  };\n\n  return (\n    <FormProvider {...methods}>\n      {error && <Alert type=\"error\">{error}</Alert>}\n\n      <form\n        className=\"flex flex-col gap-5\"\n        name=\"contactForm\"\n        autoComplete=\"off\"\n        onSubmit={handleSubmit(onFormSubmit)}\n      >\n        <FormInput\n          label=\"Name\"\n          name=\"name\"\n          value={selectedContact?.name}\n          type=\"text\"\n          placeholder=\"Enter your Contact Full Name\"\n          required={true}\n          ref={nameInput}\n        />\n        <FormInput\n          label=\"Number\"\n          name=\"number\"\n          value={selectedContact?.number}\n          type=\"tel\"\n          placeholder=\"Enter your Contact Phone Number\"\n          required={true}\n        />\n\n        <FormButton\n          type=\"submit\"\n          btnType={selectedContact ? 'btn-warning' : 'btn-info'}\n        >\n          {selectedContact ? 'Update' : 'Add'} contact\n        </FormButton>\n      </form>\n    </FormProvider>\n  );\n};\n","export const FormButton = ({\n  type = 'button',\n  btnType = 'btn-info',\n  onClick,\n  children,\n}) => {\n  return (\n    <button className={`btn ${btnType}`} type={type} onClick={onClick}>\n      {children}\n    </button>\n  );\n};\n","import { useFormContext } from 'react-hook-form';\nimport { forwardRef, useEffect } from 'react';\n\nexport const FormInput = forwardRef(function FormInput(\n  {\n    label,\n    type,\n    name,\n    value,\n    placeholder = '',\n    required = false,\n    focus = false,\n  },\n  fieldRef\n) {\n  const { register, setValue } = useFormContext();\n  const { ref, ...restRegister } = register(name);\n\n  useEffect(() => {\n    setValue(name, value);\n  }, [name, value, setValue]);\n\n  return (\n    <label className=\"form-control w-full\">\n      <div className=\"label\">\n        <span className=\"label-text\">{label}</span>\n      </div>\n      <input\n        type={type}\n        name={name}\n        autoFocus={focus}\n        required={required}\n        placeholder={placeholder}\n        {...restRegister}\n        ref={e => {\n          ref(e);\n          if (fieldRef) {\n            fieldRef.current = e;\n          }\n        }}\n        className=\"input input-bordered w-full \"\n      />\n    </label>\n  );\n});\n","import { useDispatch, useSelector } from 'react-redux';\nimport { FormButton } from 'components';\nimport {\n  selectContactsIsLoading,\n  selectFilteredContacts,\n} from './../../redux/selectors';\nimport { useEffect } from 'react';\nimport {\n  deleteContact,\n  getAllContacts,\n} from './../../redux/contacts/operations';\nimport { Loader } from 'components/Loader/Loader';\nimport { setSelectedContact } from './../../redux/contacts/contactsSlice';\n\nexport const ContactsList = () => {\n  const isLoading = useSelector(selectContactsIsLoading);\n  const contacts = useSelector(selectFilteredContacts);\n\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(getAllContacts());\n  }, [dispatch]);\n\n  const onUpdate = id => {\n    dispatch(setSelectedContact(id));\n    document.getElementById('add-contact-drawer').click();\n  };\n\n  const onDelete = id => {\n    dispatch(deleteContact(id));\n  };\n\n  return (\n    <>\n      {isLoading && <Loader />}\n\n      {contacts.length > 0 && (\n        <ul className=\"flex flex-col divide-y-2\">\n          {contacts.map(({ id, name, number }, index) => (\n            <li\n              key={id}\n              className=\"flex flex-row gap-5 justify-start justify-items-center py-3\"\n            >\n              <div className=\"flex-grow\">\n                <div className=\"text-xl font-bold capitalize\">{name}</div>\n                <div className=\"\">{number}</div>\n              </div>\n              <div className=\"flex gap-3\">\n                <FormButton btnType=\"btn-warning\" onClick={() => onUpdate(id)}>\n                  Update\n                </FormButton>\n                <FormButton btnType=\"btn-error\" onClick={() => onDelete(id)}>\n                  Delete\n                </FormButton>\n              </div>\n            </li>\n          ))}\n        </ul>\n      )}\n    </>\n  );\n};\n","import { useDispatch } from 'react-redux';\nimport { changeFilter } from './../../redux/contacts/filterSlice';\nimport { FiSearch } from 'react-icons/fi';\n\nexport const ContactsListFilter = () => {\n  const dispatch = useDispatch();\n\n  return (\n    <div className=\"relative mt-2 rounded-md shadow-sm\">\n      <div className=\"pointer-events-none absolute inset-y-0 left-0 flex items-center pl-3\">\n        <span className=\"text-gray-500 sm:text-sm\">\n          <FiSearch size={20} />\n        </span>\n      </div>\n      <input\n        type=\"text\"\n        name=\"filter\"\n        placeholder=\"Search\"\n        className=\"input input-bordered w-full px-10\"\n        onChange={event => dispatch(changeFilter(event.target.value.trim()))}\n      />\n    </div>\n  );\n};\n","import { FormProvider, useForm } from 'react-hook-form';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectAuthError, selectAuthFormId } from './../../redux/selectors';\nimport { userLogin } from './../../redux/auth/operations';\nimport { Alert } from 'components/Alert/Alert';\nimport { setAuthFormId } from './../../redux/auth/authSlice';\nimport { useEffect, useRef } from 'react';\nimport { FormButton, FormInput } from 'components';\n\nexport const LoginForm = ({ id, isModalOpen }) => {\n  const dispatch = useDispatch();\n  const error = useSelector(selectAuthError);\n  const formId = useSelector(selectAuthFormId);\n  const emailInput = useRef(null);\n  const methods = useForm();\n  const { handleSubmit, reset } = methods;\n\n  useEffect(() => {\n    isModalOpen && emailInput.current.focus();\n  }, [isModalOpen]);\n\n  const onSubmit = credentials => {\n    dispatch(setAuthFormId(id));\n    dispatch(userLogin(credentials))\n      .unwrap()\n      .then(res => reset())\n      .catch(error => {});\n  };\n  return (\n    <FormProvider {...methods}>\n      {id === formId && error && <Alert type=\"error\">{error}</Alert>}\n\n      <form\n        className=\"flex flex-col gap-5\"\n        onSubmit={handleSubmit(onSubmit)}\n        autoComplete=\"off\"\n      >\n        <FormInput\n          label=\"Email\"\n          name=\"email\"\n          type=\"email\"\n          focus={true}\n          required={true}\n          ref={emailInput}\n          placeholder=\"Enter your email\"\n        />\n\n        <FormInput\n          label=\"Password\"\n          name=\"password\"\n          type=\"password\"\n          required={true}\n          placeholder=\"Enter your password\"\n        />\n\n        <FormButton btnType=\"btn-success\" type=\"submit\">\n          Login\n        </FormButton>\n      </form>\n    </FormProvider>\n  );\n};\n","export const Modal = ({ id, close, children }) => {\n  return (\n    <dialog id={id} className=\"modal modal-bottom sm:modal-middle\">\n      <div className=\"modal-box\">\n        <form method=\"dialog\">\n          <button\n            onClick={close}\n            className=\"btn btn-sm btn-circle btn-ghost absolute right-2 top-2\"\n          >\n            ✕\n          </button>\n        </form>\n        <div className=\"py-4\">{children}</div>\n      </div>\n    </dialog>\n  );\n};\n","import { FormProvider, useForm } from 'react-hook-form';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { userSignup } from './../../redux/auth/operations';\nimport { selectAuthError, selectAuthFormId } from './../../redux/selectors';\nimport { Alert } from 'components/Alert/Alert';\nimport { setAuthFormId } from './../../redux/auth/authSlice';\nimport { useEffect, useRef } from 'react';\nimport { FormButton, FormInput } from 'components';\n\nexport const RegisterForm = ({ id, isModalOpen }) => {\n  const dispatch = useDispatch();\n  const nameInput = useRef(null);\n  const error = useSelector(selectAuthError);\n  const formId = useSelector(selectAuthFormId);\n  const methods = useForm();\n  const { handleSubmit, reset } = methods;\n\n  useEffect(() => {\n    isModalOpen && nameInput.current.focus();\n  }, [isModalOpen]);\n\n  const onSubmit = data => {\n    dispatch(setAuthFormId(id));\n    dispatch(userSignup(data))\n      .unwrap()\n      .then(res => reset())\n      .catch(error => {});\n  };\n\n  return (\n    <FormProvider {...methods}>\n      {formId && formId === id && error && <Alert type=\"error\">{error}</Alert>}\n      <form\n        className=\"flex flex-col gap-5\"\n        onSubmit={handleSubmit(onSubmit)}\n        autoComplete=\"off\"\n      >\n        <FormInput\n          label=\"Full Name\"\n          name=\"name\"\n          type=\"text\"\n          required={true}\n          ref={nameInput}\n          placeholder=\"Enter your Full Name\"\n        />\n\n        <FormInput\n          label=\"Email\"\n          name=\"email\"\n          type=\"email\"\n          required={true}\n          placeholder=\"Enter your email\"\n        />\n\n        <FormInput\n          label=\"Password\"\n          name=\"password\"\n          type=\"password\"\n          required={true}\n          placeholder=\"Enter your password\"\n        />\n\n        <FormButton btnType=\"btn-info\" type=\"submit\">\n          Register\n        </FormButton>\n      </form>\n    </FormProvider>\n  );\n};\n","import { LoginForm } from 'components/LoginForm/LoginForm';\nimport { Modal } from 'components/Modal/Modal';\nimport { RegisterForm } from 'components/RegisterForm/RegisterForm';\nimport React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { toggleModal } from './../../redux/auth/authSlice';\nimport { selectIsModalOpen } from './../../redux/selectors';\nimport { LOGIN_FORM_ID, REGISTER_FORM_ID } from 'utils/constants';\n\nconst Home = () => {\n  const dispatch = useDispatch();\n  const isModalOpen = useSelector(selectIsModalOpen);\n\n  return (\n    <div className=\"hero min-h-screen bg-base-200\">\n      <div className=\"hero-content text-center\">\n        <div className=\"max-w-md\">\n          <h1 className=\"text-5xl font-bold\">Be organized</h1>\n          <p className=\"py-6\">\n            This app helps you to keep your contacts under your control. You can\n            easily add, update, and delete contacts from your list. The search\n            feature helps you to find the person you need in just a few clicks.\n          </p>\n          <div className=\"flex gap-5 justify-center\">\n            <button\n              className=\"btn btn-success\"\n              onClick={() => {\n                document.getElementById(LOGIN_FORM_ID).showModal();\n                dispatch(toggleModal());\n              }}\n            >\n              Login\n            </button>\n            <button\n              className=\"btn btn-info\"\n              onClick={() => {\n                document.getElementById(REGISTER_FORM_ID).showModal();\n                dispatch(toggleModal());\n              }}\n            >\n              Register\n            </button>\n          </div>\n        </div>\n        <Modal close={() => dispatch(toggleModal())} id={LOGIN_FORM_ID}>\n          <LoginForm isModalOpen={isModalOpen} id={LOGIN_FORM_ID} />\n        </Modal>\n        <Modal close={() => dispatch(toggleModal())} id={REGISTER_FORM_ID}>\n          <RegisterForm isModalOpen={isModalOpen} id={REGISTER_FORM_ID} />\n        </Modal>\n      </div>\n    </div>\n  );\n};\n\nexport default Home;\n"],"names":["Alert","_ref","type","children","icon","className","_jsxs","role","concat","_jsx","xmlns","fill","viewBox","strokeLinecap","strokeLinejoin","strokeWidth","d","ContactForm","isDrawerOpen","nameInput","useRef","dispatch","useDispatch","contacts","useSelector","selectContactsAll","error","selectContactsError","selectedContact","selectSelectedContact","methods","useForm","handleSubmit","reset","useEffect","current","focus","FormProvider","_objectSpread","name","autoComplete","onSubmit","data","_ref2","find","item","toLowerCase","includes","contactsExist","setError","updateContact","id","constact","unwrap","then","resp","document","getElementById","click","catch","createContact","FormInput","label","value","placeholder","required","ref","number","FormButton","btnType","_ref$type","_ref$btnType","onClick","forwardRef","fieldRef","_ref$placeholder","_ref$required","_ref$focus","_useFormContext","useFormContext","register","setValue","_register","restRegister","_objectWithoutProperties","_excluded","autoFocus","e","ContactsList","isLoading","selectContactsIsLoading","selectFilteredContacts","getAllContacts","_Fragment","Loader","length","map","index","setSelectedContact","onUpdate","deleteContact","onDelete","ContactsListFilter","FiSearch","size","onChange","event","changeFilter","target","trim","LoginForm","isModalOpen","selectAuthError","formId","selectAuthFormId","emailInput","credentials","setAuthFormId","userLogin","res","Modal","close","method","RegisterForm","userSignup","selectIsModalOpen","LOGIN_FORM_ID","showModal","toggleModal","REGISTER_FORM_ID"],"sourceRoot":""}