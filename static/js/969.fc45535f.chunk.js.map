{"version":3,"file":"static/js/969.fc45535f.chunk.js","mappings":"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","sources":["components/Alert/Alert.jsx","components/Drawer/Drawer.jsx","components/ContactForm/ContactForm.jsx","components/ContactForm/ContactEditForm.jsx","components/FormButton/FormButton.jsx","components/FormInput/FormInput.jsx","components/ContactsList/ContactsList.jsx","components/ContactsListFilter/ContactsListFilter.jsx","pages/Contacts/Contacts.jsx"],"sourcesContent":["export const Alert = ({ type, children }) => {\n  let icon = '';\n  let className = '';\n\n  switch (type) {\n    case 'info':\n      icon = 'M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z';\n      className = 'alert-info';\n      break;\n    case 'success':\n      icon = 'M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z';\n      className = 'alert-success';\n      break;\n    case 'warning':\n      icon =\n        'M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z';\n      className = 'alert-warning';\n      break;\n    case 'error':\n      icon =\n        'M10 14l2-2m0 0l2-2m-2 2l-2-2m2 2l2 2m7-2a9 9 0 11-18 0 9 9 0 0118 0z';\n      className = 'alert-error';\n      break;\n    default:\n      icon = 'M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z';\n      className = '';\n  }\n  return (\n    <div role=\"alert\" className={`alert ${className}`}>\n      <svg\n        xmlns=\"http://www.w3.org/2000/svg\"\n        className=\"stroke-current shrink-0 h-6 w-6\"\n        fill=\"none\"\n        viewBox=\"0 0 24 24\"\n      >\n        <path\n          strokeLinecap=\"round\"\n          strokeLinejoin=\"round\"\n          strokeWidth=\"2\"\n          d={icon}\n        />\n      </svg>\n      <span>{children}</span>\n    </div>\n  );\n};\n","import { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { selectDrawerId, selectIsDrawerOpen } from './../../redux/selectors';\nimport { toggleDrawer } from './../../redux/app/appSlice';\n\nexport const Drawer = ({ id, position = 'start', onClick, children }) => {\n  const dispatch = useDispatch();\n  const [checked = false, setChecked] = useState();\n  const drawerId = useSelector(selectDrawerId);\n  const isDrawerOpen = useSelector(selectIsDrawerOpen);\n\n  useEffect(() => {\n    if (id === drawerId && isDrawerOpen) {\n      setChecked(true);\n    } else {\n      setChecked(false);\n    }\n  }, [id, drawerId, isDrawerOpen]);\n\n  const toggleContactDrawer = () => {\n    dispatch(toggleDrawer(id));\n\n    if (id === drawerId && checked) {\n      setChecked(false);\n    } else {\n      setChecked(true);\n    }\n  };\n\n  return (\n    <div className={`drawer drawer-${position}`}>\n      <input\n        id={id}\n        type=\"checkbox\"\n        className=\"drawer-toggle\"\n        checked={checked}\n        onChange={toggleContactDrawer}\n      />\n      <div className=\"drawer-side\">\n        <label\n          htmlFor={id}\n          aria-label=\"close sidebar\"\n          className=\"drawer-overlay\"\n        ></label>\n        <div className=\"menu p-4 w-80 min-h-full bg-base-200 text-base-content\">\n          {children}\n        </div>\n      </div>\n    </div>\n  );\n};\n","import { useEffect, useRef } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { FormProvider, useForm } from 'react-hook-form';\n\nimport { createContact } from './../../redux/contacts/operations';\nimport { selectContactsAll } from './../../redux/selectors';\nimport { setError } from './../../redux/contacts/contactsSlice';\nimport { selectContactsError } from './../../redux/selectors';\nimport { selectDrawerId } from './../../redux/selectors';\nimport { closeDrawer } from './../../redux/app/appSlice';\nimport { Alert } from 'components/Alert/Alert';\nimport { FormInput, FormButton } from 'components';\n\nexport const ContactForm = ({ formDrawerId, isDrawerOpen }) => {\n  const nameInput = useRef(null);\n  const dispatch = useDispatch();\n\n  const contacts = useSelector(selectContactsAll);\n  const error = useSelector(selectContactsError);\n  const drawerId = useSelector(selectDrawerId);\n\n  const methods = useForm();\n  const { handleSubmit, reset } = methods;\n\n  useEffect(() => {\n    isDrawerOpen && formDrawerId === drawerId && nameInput.current.focus();\n  }, [isDrawerOpen, formDrawerId, drawerId]);\n\n  const contactsExist = ({ name }) => {\n    return contacts.find(item =>\n      item.name.toLowerCase().includes(name.toLowerCase())\n    );\n  };\n\n  const onFormSubmit = data => {\n    if (contactsExist(data)) {\n      dispatch(setError('Contact already added to your Phonebook'));\n      nameInput.current.focus();\n      return;\n    }\n\n    dispatch(createContact(data))\n      .unwrap()\n      .then(resp => {\n        reset();\n        dispatch(closeDrawer('add-contact-drawer'));\n      })\n      .catch(error => {});\n  };\n\n  return (\n    <FormProvider {...methods}>\n      {error && <Alert type=\"error\">{error}</Alert>}\n\n      <form\n        className=\"flex flex-col gap-5\"\n        name=\"contactForm\"\n        autoComplete=\"off\"\n        onSubmit={handleSubmit(onFormSubmit)}\n      >\n        <FormInput\n          label=\"Name\"\n          name=\"name\"\n          type=\"text\"\n          placeholder=\"Enter your Contact Full Name\"\n          required={true}\n          ref={nameInput}\n        />\n        <FormInput\n          label=\"Number\"\n          name=\"number\"\n          type=\"tel\"\n          placeholder=\"Enter your Contact Phone Number\"\n          required={true}\n        />\n\n        <FormButton type=\"submit\" btnType=\"btn-info\">\n          Add contact\n        </FormButton>\n      </form>\n    </FormProvider>\n  );\n};\n","import { useEffect, useRef } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { FormProvider, useForm } from 'react-hook-form';\n\nimport { updateContact } from './../../redux/contacts/operations';\nimport { selectContactsError } from '../../redux/selectors';\nimport { selectSelectedContact } from '../../redux/selectors';\nimport { selectDrawerId } from '../../redux/selectors';\nimport { closeDrawer } from '../../redux/app/appSlice';\nimport { Alert } from 'components/Alert/Alert';\nimport { FormInput, FormButton } from 'components';\n\nexport const ContactEditForm = ({ formDrawerId, isDrawerOpen }) => {\n  const nameInput = useRef(null);\n  const dispatch = useDispatch();\n\n  const error = useSelector(selectContactsError);\n  const selectedContact = useSelector(selectSelectedContact);\n  const drawerId = useSelector(selectDrawerId);\n\n  const methods = useForm();\n  const { handleSubmit, reset } = methods;\n\n  useEffect(() => {\n    isDrawerOpen && formDrawerId === drawerId && nameInput.current.focus();\n  }, [isDrawerOpen, formDrawerId, drawerId]);\n\n  const onFormSubmit = data => {\n    dispatch(updateContact({ id: selectedContact.id, constact: data }))\n      .unwrap()\n      .then(resp => {\n        reset();\n        dispatch(closeDrawer('add-contact-drawer'));\n      })\n      .catch(error => {});\n  };\n\n  return (\n    <FormProvider {...methods}>\n      {error && <Alert type=\"error\">{error}</Alert>}\n\n      <form\n        className=\"flex flex-col gap-5\"\n        name=\"contactForm\"\n        autoComplete=\"off\"\n        onSubmit={handleSubmit(onFormSubmit)}\n      >\n        <FormInput\n          label=\"Name\"\n          name=\"name\"\n          value={selectedContact?.name}\n          type=\"text\"\n          placeholder=\"Enter your Contact Full Name\"\n          required={true}\n          ref={nameInput}\n        />\n        <FormInput\n          label=\"Number\"\n          name=\"number\"\n          value={selectedContact?.number}\n          type=\"tel\"\n          placeholder=\"Enter your Contact Phone Number\"\n          required={true}\n        />\n\n        <FormButton type=\"submit\" btnType=\"btn-warning\">\n          Update contact\n        </FormButton>\n      </form>\n    </FormProvider>\n  );\n};\n","export const FormButton = ({\n  type = 'button',\n  btnType = '',\n  onClick,\n  children,\n}) => {\n  return (\n    <button className={`btn ${btnType}`} type={type} onClick={onClick}>\n      {children}\n    </button>\n  );\n};\n","import { useFormContext } from 'react-hook-form';\nimport { forwardRef, useEffect } from 'react';\n\nexport const FormInput = forwardRef(function FormInput(\n  {\n    label,\n    type,\n    name,\n    value,\n    placeholder = '',\n    required = false,\n    focus = false,\n  },\n  fieldRef\n) {\n  const { register, setValue } = useFormContext();\n  const { ref, ...restRegister } = register(name);\n\n  useEffect(() => {\n    setValue(name, value);\n  }, [name, value, setValue]);\n\n  return (\n    <label className=\"form-control w-full\">\n      <div className=\"label\">\n        <span className=\"label-text\">{label}</span>\n      </div>\n      <input\n        type={type}\n        name={name}\n        autoFocus={focus}\n        required={required}\n        placeholder={placeholder}\n        {...restRegister}\n        ref={e => {\n          ref(e);\n          if (fieldRef) {\n            fieldRef.current = e;\n          }\n        }}\n        className=\"input input-bordered w-full \"\n      />\n    </label>\n  );\n});\n","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport {\n  selectContactsIsLoading,\n  selectFilteredContacts,\n} from './../../redux/selectors';\nimport {\n  deleteContact,\n  getAllContacts,\n} from './../../redux/contacts/operations';\nimport { setSelectedContact } from './../../redux/contacts/contactsSlice';\nimport { openDrawer } from './../../redux/app/appSlice';\nimport { FormButton } from 'components';\nimport { Loader } from 'components/Loader/Loader';\n\nexport const ContactsList = () => {\n  const isLoading = useSelector(selectContactsIsLoading);\n  const contacts = useSelector(selectFilteredContacts);\n\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(getAllContacts());\n  }, [dispatch]);\n\n  const onUpdate = id => {\n    dispatch(setSelectedContact(id));\n    dispatch(openDrawer('edit-contact-drawer'));\n  };\n\n  const onDelete = id => {\n    dispatch(deleteContact(id));\n  };\n\n  return (\n    <>\n      {isLoading && <Loader />}\n\n      {contacts.length > 0 && (\n        <ul className=\"flex flex-col divide-y-2\">\n          {contacts.map(({ id, name, number }, index) => (\n            <li\n              key={id}\n              className=\"flex flex-row gap-5 justify-start justify-items-center py-3\"\n            >\n              <div className=\"flex-grow\">\n                <div className=\"text-xl font-bold capitalize\">{name}</div>\n                <div className=\"\">{number}</div>\n              </div>\n              <div className=\"flex gap-3\">\n                <FormButton btnType=\"btn-warning\" onClick={() => onUpdate(id)}>\n                  Update\n                </FormButton>\n                <FormButton btnType=\"btn-error\" onClick={() => onDelete(id)}>\n                  Delete\n                </FormButton>\n              </div>\n            </li>\n          ))}\n        </ul>\n      )}\n    </>\n  );\n};\n","import { useDispatch } from 'react-redux';\nimport { changeFilter } from './../../redux/contacts/filterSlice';\nimport { FiSearch } from 'react-icons/fi';\n\nexport const ContactsListFilter = () => {\n  const dispatch = useDispatch();\n\n  return (\n    <div className=\"relative mt-2 rounded-md shadow-sm\">\n      <div className=\"pointer-events-none absolute inset-y-0 left-0 flex items-center pl-3\">\n        <span className=\"text-gray-500 sm:text-sm\">\n          <FiSearch size={20} />\n        </span>\n      </div>\n      <input\n        type=\"text\"\n        name=\"filter\"\n        placeholder=\"Search\"\n        className=\"input input-bordered w-full px-10\"\n        onChange={event => dispatch(changeFilter(event.target.value.trim()))}\n      />\n    </div>\n  );\n};\n","import { useSelector } from 'react-redux';\n\nimport { selectIsDrawerOpen } from './../../redux/selectors';\nimport {\n  ContactEditForm,\n  ContactForm,\n  ContactsList,\n  ContactsListFilter,\n} from 'components';\nimport { Drawer } from 'components/Drawer/Drawer';\n\nconst Contacts = () => {\n  const isDrawerOpen = useSelector(selectIsDrawerOpen);\n\n  return (\n    <div className=\"flex justify-center min-h-screen bg-base-200\">\n      <div className=\"max-w-lg w-full flex flex-col gap-10\">\n        <ContactsListFilter />\n        <ContactsList />\n\n        <Drawer id=\"add-contact-drawer\" position=\"end\">\n          <ContactForm\n            formDrawerId=\"add-contact-drawer\"\n            isDrawerOpen={isDrawerOpen}\n          />\n        </Drawer>\n        <Drawer id=\"edit-contact-drawer\" position=\"end\">\n          <ContactEditForm\n            formDrawerId=\"edit-contact-drawer\"\n            isDrawerOpen={isDrawerOpen}\n          />\n        </Drawer>\n      </div>\n    </div>\n  );\n};\n\nexport default Contacts;\n"],"names":["Alert","_ref","type","children","icon","className","_jsxs","role","concat","_jsx","xmlns","fill","viewBox","strokeLinecap","strokeLinejoin","strokeWidth","d","Drawer","id","_ref$position","position","onClick","dispatch","useDispatch","_useState","useState","_useState2","_slicedToArray","_useState2$","checked","setChecked","drawerId","useSelector","selectDrawerId","isDrawerOpen","selectIsDrawerOpen","useEffect","onChange","toggleDrawer","htmlFor","ContactForm","formDrawerId","nameInput","useRef","contacts","selectContactsAll","error","selectContactsError","methods","useForm","handleSubmit","reset","current","focus","FormProvider","_objectSpread","name","autoComplete","onSubmit","data","_ref2","find","item","toLowerCase","includes","contactsExist","setError","createContact","unwrap","then","resp","closeDrawer","catch","FormInput","label","placeholder","required","ref","FormButton","btnType","ContactEditForm","selectedContact","selectSelectedContact","updateContact","constact","value","number","_ref$type","_ref$btnType","forwardRef","fieldRef","_ref$placeholder","_ref$required","_ref$focus","_useFormContext","useFormContext","register","setValue","_register","restRegister","_objectWithoutProperties","_excluded","autoFocus","e","ContactsList","isLoading","selectContactsIsLoading","selectFilteredContacts","getAllContacts","_Fragment","Loader","length","map","index","setSelectedContact","openDrawer","onUpdate","deleteContact","onDelete","ContactsListFilter","FiSearch","size","event","changeFilter","target","trim"],"sourceRoot":""}