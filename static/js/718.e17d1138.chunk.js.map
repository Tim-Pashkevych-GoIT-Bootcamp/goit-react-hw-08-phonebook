{"version":3,"file":"static/js/718.e17d1138.chunk.js","mappings":"4OAMaA,EAAS,SAAHC,GAAuD,IAAjDC,EAAED,EAAFC,GAAEC,EAAAF,EAAEG,SAAAA,OAAQ,IAAAD,EAAG,QAAOA,EAAWE,GAAFJ,EAAPK,QAAiBL,EAARI,UAClDE,GAAWC,EAAAA,EAAAA,MACjBC,GAAsCC,EAAAA,EAAAA,YAAUC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAAAI,EAAAF,EAAA,GAAzCG,OAAO,IAAAD,GAAQA,EAAEE,EAAUJ,EAAA,GAC5BK,GAAWC,EAAAA,EAAAA,IAAYC,EAAAA,IACvBC,GAAeF,EAAAA,EAAAA,IAAYG,EAAAA,KAEjCC,EAAAA,EAAAA,YAAU,WAENN,IADEb,IAAOc,IAAYG,GAKzB,GAAG,CAACjB,EAAIc,EAAUG,IAYlB,OACEG,EAAAA,EAAAA,MAAA,OAAKC,UAAS,iBAAAC,OAAmBpB,GAAWC,SAAA,EAC1CoB,EAAAA,EAAAA,KAAA,SACEvB,GAAIA,EACJwB,KAAK,WACLH,UAAU,gBACVT,QAASA,EACTa,SAjBsB,WAC1BpB,GAASqB,EAAAA,EAAAA,IAAa1B,IAGpBa,EADEb,IAAOc,IAAYF,EAKzB,KAWIQ,EAAAA,EAAAA,MAAA,OAAKC,UAAU,cAAalB,SAAA,EAC1BoB,EAAAA,EAAAA,KAAA,SACEI,QAAS3B,EACT,aAAW,gBACXqB,UAAU,oBAEZE,EAAAA,EAAAA,KAAA,OAAKF,UAAU,yDAAwDlB,SACpEA,SAKX,C,4IC5CayB,EAAS,WACpB,IAAMvB,GAAWC,EAAAA,EAAAA,MACXuB,GAAad,EAAAA,EAAAA,IAAYe,EAAAA,IAE/B,OACEV,EAAAA,EAAAA,MAAA,OAAKC,UAAU,qBAAoBlB,SAAA,EACjCoB,EAAAA,EAAAA,KAAA,OAAKF,UAAU,YAAWlB,UACxBoB,EAAAA,EAAAA,KAAA,UACEF,UAAU,2BACVjB,QAAS,kBAAMC,GAAS0B,EAAAA,EAAAA,IAAW,oBAAoB,EAAC5B,UAExDoB,EAAAA,EAAAA,KAAA,OACES,MAAM,6BACNC,KAAK,OACLC,QAAQ,YACRb,UAAU,sCAAqClB,UAE/CoB,EAAAA,EAAAA,KAAA,QACEY,cAAc,QACdC,eAAe,QACfC,YAAY,IACZC,EAAE,mCAKVf,EAAAA,EAAAA,KAAA,OAAKF,UAAU,SAAQlB,UACrBoB,EAAAA,EAAAA,KAAA,MAAIF,UAAU,8BAA6BlB,SACxC0B,EAAa,WAAa,oBAG/BN,EAAAA,EAAAA,KAAA,OAAKF,UAAU,YAAWlB,SACvB0B,IACCN,EAAAA,EAAAA,KAAA,UACEF,UAAU,2BACVjB,QAAS,kBAAMC,GAAS0B,EAAAA,EAAAA,IAAW,sBAAsB,EAAC5B,UAE1DoB,EAAAA,EAAAA,KAACgB,EAAAA,IAAgB,CAACC,KAAM,WAMpC,E,8BC3CaC,EAAW,WACtB,IAAMpC,GAAWC,EAAAA,EAAAA,MACXuB,GAAad,EAAAA,EAAAA,IAAYe,EAAAA,IACzBY,GAAO3B,EAAAA,EAAAA,IAAY4B,EAAAA,IAiBzB,OACEpB,EAAAA,EAAAA,KAAA,MAAIF,UAAU,UAASlB,SACpB0B,GACCT,EAAAA,EAAAA,MAAAwB,EAAAA,SAAA,CAAAzC,SAAA,EACEoB,EAAAA,EAAAA,KAAA,MAAApB,UACEoB,EAAAA,EAAAA,KAACsB,EAAAA,GAAI,CAAA1C,SAAEuC,EAAKI,WAEdvB,EAAAA,EAAAA,KAAA,MAAApB,UACEoB,EAAAA,EAAAA,KAACsB,EAAAA,GAAI,CAACzC,QAvBD,WACbC,GAAS0C,EAAAA,EAAAA,OACT1C,GAAS2C,EAAAA,EAAAA,IAAY,oBACvB,EAoBgC7C,SAAC,iBAI3BiB,EAAAA,EAAAA,MAAAwB,EAAAA,SAAA,CAAAzC,SAAA,EACEoB,EAAAA,EAAAA,KAAA,MAAApB,UACEoB,EAAAA,EAAAA,KAACsB,EAAAA,GAAI,CAACzC,QAxBE,WAChBC,GAAS4C,EAAAA,EAAAA,IAAYC,EAAAA,IACrB7C,GAAS2C,EAAAA,EAAAA,IAAY,oBACvB,EAqBmC7C,SAAC,aAE5BoB,EAAAA,EAAAA,KAAA,MAAApB,UACEoB,EAAAA,EAAAA,KAACsB,EAAAA,GAAI,CAACzC,QAtBK,WACnBC,GAAS4C,EAAAA,EAAAA,IAAYE,EAAAA,IACrB9C,GAAS2C,EAAAA,EAAAA,IAAY,oBACvB,EAmBsC7C,SAAC,mBAMzC,E,mBC3BA,EAfe,WACb,OACEiB,EAAAA,EAAAA,MAAAwB,EAAAA,SAAA,CAAAzC,SAAA,EACEoB,EAAAA,EAAAA,KAACK,EAAM,KACPL,EAAAA,EAAAA,KAAC6B,EAAAA,SAAQ,CAACC,UAAU9B,EAAAA,EAAAA,KAAC+B,EAAAA,EAAM,IAAInD,UAC7BoB,EAAAA,EAAAA,KAACgC,EAAAA,GAAM,OAGThC,EAAAA,EAAAA,KAACzB,EAAAA,EAAM,CAACE,GAAG,mBAAmBE,SAAS,QAAOC,UAC5CoB,EAAAA,EAAAA,KAACkB,EAAQ,QAIjB,C,4FCnBaS,GAAgBM,EAAAA,EAAAA,MAChBL,GAAmBK,EAAAA,EAAAA,K","sources":["components/Drawer/Drawer.jsx","components/NavBar/NavBar.jsx","components/UserMenu/UserMenu.jsx","components/Layout.jsx","utils/constants.js"],"sourcesContent":["import { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { selectDrawerId, selectIsDrawerOpen } from './../../redux/selectors';\nimport { toggleDrawer } from './../../redux/app/appSlice';\n\nexport const Drawer = ({ id, position = 'start', onClick, children }) => {\n  const dispatch = useDispatch();\n  const [checked = false, setChecked] = useState();\n  const drawerId = useSelector(selectDrawerId);\n  const isDrawerOpen = useSelector(selectIsDrawerOpen);\n\n  useEffect(() => {\n    if (id === drawerId && isDrawerOpen) {\n      setChecked(true);\n    } else {\n      setChecked(false);\n    }\n  }, [id, drawerId, isDrawerOpen]);\n\n  const toggleContactDrawer = () => {\n    dispatch(toggleDrawer(id));\n\n    if (id === drawerId && checked) {\n      setChecked(false);\n    } else {\n      setChecked(true);\n    }\n  };\n\n  return (\n    <div className={`drawer drawer-${position}`}>\n      <input\n        id={id}\n        type=\"checkbox\"\n        className=\"drawer-toggle\"\n        checked={checked}\n        onChange={toggleContactDrawer}\n      />\n      <div className=\"drawer-side\">\n        <label\n          htmlFor={id}\n          aria-label=\"close sidebar\"\n          className=\"drawer-overlay\"\n        ></label>\n        <div className=\"menu p-4 w-80 min-h-full bg-base-200 text-base-content\">\n          {children}\n        </div>\n      </div>\n    </div>\n  );\n};\n","import React from 'react';\nimport { HiOutlineUserAdd } from 'react-icons/hi';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { selectAuthIsLoggedIn } from './../../redux/selectors';\nimport { openDrawer } from './../../redux/app/appSlice';\n\nexport const NavBar = () => {\n  const dispatch = useDispatch();\n  const isLoggedIn = useSelector(selectAuthIsLoggedIn);\n\n  return (\n    <div className=\"navbar bg-base-100\">\n      <div className=\"flex-none\">\n        <button\n          className=\"btn btn-square btn-ghost\"\n          onClick={() => dispatch(openDrawer('user-menu-drawer'))}\n        >\n          <svg\n            xmlns=\"http://www.w3.org/2000/svg\"\n            fill=\"none\"\n            viewBox=\"0 0 24 24\"\n            className=\"inline-block w-7 h-7 stroke-current\"\n          >\n            <path\n              strokeLinecap=\"round\"\n              strokeLinejoin=\"round\"\n              strokeWidth=\"2\"\n              d=\"M4 6h16M4 12h16M4 18h16\"\n            ></path>\n          </svg>\n        </button>\n      </div>\n      <div className=\"flex-1\">\n        <h1 className=\"text-center w-full text-3xl\">\n          {isLoggedIn ? 'Contacts' : 'Address Book'}\n        </h1>\n      </div>\n      <div className=\"flex-none\">\n        {isLoggedIn && (\n          <button\n            className=\"btn btn-square btn-ghost\"\n            onClick={() => dispatch(openDrawer('add-contact-drawer'))}\n          >\n            <HiOutlineUserAdd size={25} />\n          </button>\n        )}\n      </div>\n    </div>\n  );\n};\n","import { useDispatch, useSelector } from 'react-redux';\nimport { selectAuthIsLoggedIn, selectAuthUser } from './../../redux/selectors';\nimport { userLogout } from './../../redux/auth/operations';\nimport { LOGIN_FORM_ID, REGISTER_FORM_ID } from 'utils/constants';\nimport { closeDrawer, toggleModal } from './../../redux/app/appSlice';\nimport { Link } from 'react-router-dom';\n\nexport const UserMenu = () => {\n  const dispatch = useDispatch();\n  const isLoggedIn = useSelector(selectAuthIsLoggedIn);\n  const user = useSelector(selectAuthUser);\n\n  const logout = () => {\n    dispatch(userLogout());\n    dispatch(closeDrawer('user-menu-drawer'));\n  };\n\n  const showLogin = () => {\n    dispatch(toggleModal(LOGIN_FORM_ID));\n    dispatch(closeDrawer('user-menu-drawer'));\n  };\n\n  const showRegister = () => {\n    dispatch(toggleModal(REGISTER_FORM_ID));\n    dispatch(closeDrawer('user-menu-drawer'));\n  };\n\n  return (\n    <ul className=\"text-lg\">\n      {isLoggedIn ? (\n        <>\n          <li>\n            <Link>{user.email}</Link>\n          </li>\n          <li>\n            <Link onClick={logout}>Logout</Link>\n          </li>\n        </>\n      ) : (\n        <>\n          <li>\n            <Link onClick={showLogin}>Login</Link>\n          </li>\n          <li>\n            <Link onClick={showRegister}>Register</Link>\n          </li>\n        </>\n      )}\n    </ul>\n  );\n};\n","import { Suspense } from 'react';\nimport { Outlet } from 'react-router-dom';\n\nimport { NavBar } from './NavBar/NavBar';\nimport { UserMenu } from './UserMenu/UserMenu';\nimport { Drawer } from './Drawer/Drawer';\nimport { Loader } from './Loader/Loader';\n\nconst Layout = () => {\n  return (\n    <>\n      <NavBar />\n      <Suspense fallback={<Loader />}>\n        <Outlet />\n      </Suspense>\n\n      <Drawer id=\"user-menu-drawer\" position=\"start\">\n        <UserMenu />\n      </Drawer>\n    </>\n  );\n};\n\nexport default Layout;\n","import { nanoid } from '@reduxjs/toolkit';\n\nexport const LOGIN_FORM_ID = nanoid();\nexport const REGISTER_FORM_ID = nanoid();\n"],"names":["Drawer","_ref","id","_ref$position","position","children","onClick","dispatch","useDispatch","_useState","useState","_useState2","_slicedToArray","_useState2$","checked","setChecked","drawerId","useSelector","selectDrawerId","isDrawerOpen","selectIsDrawerOpen","useEffect","_jsxs","className","concat","_jsx","type","onChange","toggleDrawer","htmlFor","NavBar","isLoggedIn","selectAuthIsLoggedIn","openDrawer","xmlns","fill","viewBox","strokeLinecap","strokeLinejoin","strokeWidth","d","HiOutlineUserAdd","size","UserMenu","user","selectAuthUser","_Fragment","Link","email","userLogout","closeDrawer","toggleModal","LOGIN_FORM_ID","REGISTER_FORM_ID","Suspense","fallback","Loader","Outlet","nanoid"],"sourceRoot":""}